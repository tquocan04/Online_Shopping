// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Online_Shopping.Context;

#nullable disable

namespace Online_Shopping.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20241227120505_AddDataAddress")]
    partial class AddDataAddress
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd781de2-93a7-421c-a0dc-8f7a6279c04e"),
                            DistrictId = new Guid("bfb4be74-f5ed-4e67-94ba-7ee067a2098d"),
                            EmployeeId = new Guid("32aecf7c-3670-42ba-bd24-c4173b2452df"),
                            IsDefault = true,
                            Street = "2012004"
                        });
                });

            modelBuilder.Entity("Entities.Entities.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Entities.Entities.BranchProduct", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("BranchProducts");
                });

            modelBuilder.Entity("Entities.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Entities.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b84594b-aa7f-4a69-b54a-96cbf9b17c6e"),
                            Name = "Hà Nội",
                            RegionId = "Bac"
                        },
                        new
                        {
                            Id = new Guid("0bdea930-da3d-40c6-97cd-b3969f8014c7"),
                            Name = "Hải Phòng",
                            RegionId = "Bac"
                        },
                        new
                        {
                            Id = new Guid("4a486645-052b-4a56-bb36-75c7e876ae2d"),
                            Name = "Hải Dương",
                            RegionId = "Bac"
                        },
                        new
                        {
                            Id = new Guid("2df88e32-3919-494d-b489-dbf4258fc245"),
                            Name = "Phú Thọ",
                            RegionId = "Bac"
                        },
                        new
                        {
                            Id = new Guid("14b0bd4d-27af-496e-aa9c-3e1d532f5038"),
                            Name = "Quảng Ninh",
                            RegionId = "Bac"
                        },
                        new
                        {
                            Id = new Guid("fc446281-359c-46ec-a2b9-bf9f26014f88"),
                            Name = "Đà Nẵng",
                            RegionId = "Trung"
                        },
                        new
                        {
                            Id = new Guid("3321ed88-441b-4121-9ead-e154544185e1"),
                            Name = "Thừa-Thiên Huế",
                            RegionId = "Trung"
                        },
                        new
                        {
                            Id = new Guid("aec5e588-017c-4da1-91e8-b8bc1888056e"),
                            Name = "Quảng Nam",
                            RegionId = "Trung"
                        },
                        new
                        {
                            Id = new Guid("a41ba56a-b53b-42f6-8c56-04dcbbde7905"),
                            Name = "Quảng Trị",
                            RegionId = "Trung"
                        },
                        new
                        {
                            Id = new Guid("b40f6c23-15f7-460c-8f94-fdcbe33cda68"),
                            Name = "Bình Dương",
                            RegionId = "Nam"
                        },
                        new
                        {
                            Id = new Guid("bbf96ba4-7836-4c53-af1a-e3e572f31ebf"),
                            Name = "Bà Rịa Vũng Tàu",
                            RegionId = "Nam"
                        },
                        new
                        {
                            Id = new Guid("acd51ba8-d6e3-4110-831e-5147f8fe2c96"),
                            Name = "Đồng Nai",
                            RegionId = "Nam"
                        },
                        new
                        {
                            Id = new Guid("6f624665-053e-45d2-8dd6-42baa124b481"),
                            Name = "Hồ Chí Minh",
                            RegionId = "Nam"
                        },
                        new
                        {
                            Id = new Guid("ad453439-a309-42a3-917c-d6aaa67ac9ca"),
                            Name = "Long An",
                            RegionId = "Nam"
                        });
                });

            modelBuilder.Entity("Entities.Entities.Credential", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("Entities.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Entities.Entities.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Districts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("289f3f8b-7b77-491e-9892-043cee73f0a3"),
                            CityId = new Guid("14b0bd4d-27af-496e-aa9c-3e1d532f5038"),
                            Name = "Cẩm Phả"
                        },
                        new
                        {
                            Id = new Guid("412da1ea-5f1b-4aa3-9c13-cf5d557b59e3"),
                            CityId = new Guid("14b0bd4d-27af-496e-aa9c-3e1d532f5038"),
                            Name = "Móng Cái"
                        },
                        new
                        {
                            Id = new Guid("1bc7754e-bacc-484f-b5cc-7e2df41f1f30"),
                            CityId = new Guid("14b0bd4d-27af-496e-aa9c-3e1d532f5038"),
                            Name = "Hạ Long"
                        },
                        new
                        {
                            Id = new Guid("1be59787-ee81-4824-b7e1-766e71fffa6b"),
                            CityId = new Guid("14b0bd4d-27af-496e-aa9c-3e1d532f5038"),
                            Name = "Uông Bí"
                        },
                        new
                        {
                            Id = new Guid("4af1f7fa-cd35-4940-b2f9-8811ca9a2b75"),
                            CityId = new Guid("4a486645-052b-4a56-bb36-75c7e876ae2d"),
                            Name = "Chí Linh"
                        },
                        new
                        {
                            Id = new Guid("2f657b93-1d8b-4024-bfd9-827009d98c67"),
                            CityId = new Guid("4a486645-052b-4a56-bb36-75c7e876ae2d"),
                            Name = "Hải Dương"
                        },
                        new
                        {
                            Id = new Guid("1f461ef4-7dbc-4f7c-b51e-a16a5cfca7d3"),
                            CityId = new Guid("4a486645-052b-4a56-bb36-75c7e876ae2d"),
                            Name = "Gia Lộc"
                        },
                        new
                        {
                            Id = new Guid("eef65a95-e294-46a3-828f-5e44ca4b2c77"),
                            CityId = new Guid("2df88e32-3919-494d-b489-dbf4258fc245"),
                            Name = "Hạ Hòa"
                        },
                        new
                        {
                            Id = new Guid("91d1c4dd-f364-412d-a7a2-8857f4b8a9c9"),
                            CityId = new Guid("2df88e32-3919-494d-b489-dbf4258fc245"),
                            Name = "Thanh Thủy"
                        },
                        new
                        {
                            Id = new Guid("db4e7867-1156-44d9-825b-8f42ae9712fe"),
                            CityId = new Guid("2df88e32-3919-494d-b489-dbf4258fc245"),
                            Name = "Yên Lập"
                        },
                        new
                        {
                            Id = new Guid("9744402f-34c1-4555-baff-9450ab73303a"),
                            CityId = new Guid("0bdea930-da3d-40c6-97cd-b3969f8014c7"),
                            Name = "Hồng Bàng"
                        },
                        new
                        {
                            Id = new Guid("033fbf94-3a48-4bec-a1d1-13f0dcca7ff2"),
                            CityId = new Guid("0bdea930-da3d-40c6-97cd-b3969f8014c7"),
                            Name = "Lê Chân"
                        },
                        new
                        {
                            Id = new Guid("aabecff8-16d3-4298-839b-c5ec84ae49a3"),
                            CityId = new Guid("0bdea930-da3d-40c6-97cd-b3969f8014c7"),
                            Name = "Kiến An"
                        },
                        new
                        {
                            Id = new Guid("bfb4be74-f5ed-4e67-94ba-7ee067a2098d"),
                            CityId = new Guid("1b84594b-aa7f-4a69-b54a-96cbf9b17c6e"),
                            Name = "Ba Đình"
                        },
                        new
                        {
                            Id = new Guid("b999d3eb-a753-49f4-897f-4c37002e1302"),
                            CityId = new Guid("1b84594b-aa7f-4a69-b54a-96cbf9b17c6e"),
                            Name = "Cầu Giấy"
                        },
                        new
                        {
                            Id = new Guid("b051a4a6-66ba-4220-95e4-59abd37d4e0b"),
                            CityId = new Guid("1b84594b-aa7f-4a69-b54a-96cbf9b17c6e"),
                            Name = "Đống Đa"
                        },
                        new
                        {
                            Id = new Guid("83ba4e24-9a0f-4c6a-b822-29a1eb5f4d3f"),
                            CityId = new Guid("1b84594b-aa7f-4a69-b54a-96cbf9b17c6e"),
                            Name = "Hoàn Kiếm"
                        },
                        new
                        {
                            Id = new Guid("a9e0ff46-2f5c-463a-a793-08e9a533900c"),
                            CityId = new Guid("3321ed88-441b-4121-9ead-e154544185e1"),
                            Name = "Hương Thủy"
                        },
                        new
                        {
                            Id = new Guid("4b1dd408-19c8-40cc-a39a-02ecaf53cfbe"),
                            CityId = new Guid("3321ed88-441b-4121-9ead-e154544185e1"),
                            Name = "Phong Điền"
                        },
                        new
                        {
                            Id = new Guid("5e9c531c-cf58-4f0b-a447-d1a1cfd2b1b6"),
                            CityId = new Guid("3321ed88-441b-4121-9ead-e154544185e1"),
                            Name = "Phú Vang"
                        },
                        new
                        {
                            Id = new Guid("2e8e7f13-ca6a-42c7-a1a0-fc5b4c872b3f"),
                            CityId = new Guid("fc446281-359c-46ec-a2b9-bf9f26014f88"),
                            Name = "Hải Châu"
                        },
                        new
                        {
                            Id = new Guid("9fc84eab-708a-49a2-b819-06d0629e560a"),
                            CityId = new Guid("fc446281-359c-46ec-a2b9-bf9f26014f88"),
                            Name = "Hoàng Sa"
                        },
                        new
                        {
                            Id = new Guid("24de8ac0-247f-40e4-b472-1171b56c1e74"),
                            CityId = new Guid("aec5e588-017c-4da1-91e8-b8bc1888056e"),
                            Name = "Hội An"
                        },
                        new
                        {
                            Id = new Guid("8c132e18-9710-402f-a5c0-7ad8dd90311b"),
                            CityId = new Guid("aec5e588-017c-4da1-91e8-b8bc1888056e"),
                            Name = "Tam Kỳ"
                        },
                        new
                        {
                            Id = new Guid("603cf681-062c-4378-89d0-a534ab196661"),
                            CityId = new Guid("a41ba56a-b53b-42f6-8c56-04dcbbde7905"),
                            Name = "Cam Lộ"
                        },
                        new
                        {
                            Id = new Guid("aab01227-c628-4ad0-a7c3-69ce33712109"),
                            CityId = new Guid("a41ba56a-b53b-42f6-8c56-04dcbbde7905"),
                            Name = "Hải Lăng"
                        },
                        new
                        {
                            Id = new Guid("53b0b29e-7b2c-4d4b-accc-f693ce746539"),
                            CityId = new Guid("6f624665-053e-45d2-8dd6-42baa124b481"),
                            Name = "Quận 1"
                        },
                        new
                        {
                            Id = new Guid("c893d9cf-7b2d-4ebc-9c65-3f78e0fce6bb"),
                            CityId = new Guid("6f624665-053e-45d2-8dd6-42baa124b481"),
                            Name = "Quận 5"
                        },
                        new
                        {
                            Id = new Guid("f9be5b5e-847d-47e9-847a-0150c4f608e1"),
                            CityId = new Guid("6f624665-053e-45d2-8dd6-42baa124b481"),
                            Name = "Quận 10"
                        },
                        new
                        {
                            Id = new Guid("93811fdc-4e5e-4e92-87dd-91650cfe357a"),
                            CityId = new Guid("acd51ba8-d6e3-4110-831e-5147f8fe2c96"),
                            Name = "Biên Hòa"
                        },
                        new
                        {
                            Id = new Guid("05e87ab6-1238-412d-9d93-88902310ee89"),
                            CityId = new Guid("acd51ba8-d6e3-4110-831e-5147f8fe2c96"),
                            Name = "Trảng Bom"
                        },
                        new
                        {
                            Id = new Guid("e60650de-7772-49d5-ac72-81d3bfa774d4"),
                            CityId = new Guid("acd51ba8-d6e3-4110-831e-5147f8fe2c96"),
                            Name = "Long Khánh"
                        },
                        new
                        {
                            Id = new Guid("90c585ba-5d16-4406-ad97-41c34732ccd3"),
                            CityId = new Guid("acd51ba8-d6e3-4110-831e-5147f8fe2c96"),
                            Name = "Long Thành"
                        },
                        new
                        {
                            Id = new Guid("283942d0-07a6-44c4-a8e3-af3372c4f4d7"),
                            CityId = new Guid("bbf96ba4-7836-4c53-af1a-e3e572f31ebf"),
                            Name = "Thị xã Bà Rịa"
                        },
                        new
                        {
                            Id = new Guid("ab041f51-dcf0-4071-b1ae-6ebeaf3c4840"),
                            CityId = new Guid("bbf96ba4-7836-4c53-af1a-e3e572f31ebf"),
                            Name = "Châu Đốc"
                        },
                        new
                        {
                            Id = new Guid("f6220d40-db0b-4be5-ada4-5996bab22cd0"),
                            CityId = new Guid("bbf96ba4-7836-4c53-af1a-e3e572f31ebf"),
                            Name = "Xuyên Mộc"
                        },
                        new
                        {
                            Id = new Guid("c56546a3-e495-4662-a7f4-9196eccbdbf7"),
                            CityId = new Guid("b40f6c23-15f7-460c-8f94-fdcbe33cda68"),
                            Name = "Dĩ An"
                        },
                        new
                        {
                            Id = new Guid("8f23aec1-ad93-4170-8493-b388da9ec33e"),
                            CityId = new Guid("b40f6c23-15f7-460c-8f94-fdcbe33cda68"),
                            Name = "Tân Uyên"
                        },
                        new
                        {
                            Id = new Guid("af5c6bad-cba1-459c-aacc-e31438f4ba31"),
                            CityId = new Guid("b40f6c23-15f7-460c-8f94-fdcbe33cda68"),
                            Name = "Thủ Dầu Một"
                        },
                        new
                        {
                            Id = new Guid("57fa0862-5fc6-4e0b-bc55-b8dda3860fc8"),
                            CityId = new Guid("ad453439-a309-42a3-917c-d6aaa67ac9ca"),
                            Name = "Đức Huệ"
                        },
                        new
                        {
                            Id = new Guid("9d442ba3-12d2-4845-9a9c-92d88979bd96"),
                            CityId = new Guid("ad453439-a309-42a3-917c-d6aaa67ac9ca"),
                            Name = "Tân An"
                        });
                });

            modelBuilder.Entity("Entities.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("32aecf7c-3670-42ba-bd24-c4173b2452df"),
                            Dob = new DateOnly(2004, 1, 20),
                            Email = "adminn@gmail.com",
                            Gender = "Nam",
                            Name = "Admin",
                            Password = "admin123",
                            PhoneNumber = "0939771198",
                            RoleId = "Admin",
                            Username = "adminn"
                        });
                });

            modelBuilder.Entity("Entities.Entities.Item", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Entities.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCart")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShippingMethodId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ShippingMethodId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.Entities.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = "MOMO",
                            Name = "MOMO"
                        },
                        new
                        {
                            Id = "ZALOPAY",
                            Name = "ZALOPAY"
                        },
                        new
                        {
                            Id = "CASH",
                            Name = "CASH"
                        });
                });

            modelBuilder.Entity("Entities.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Entities.Entities.Region", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = "Bac",
                            Name = "Miền Bắc"
                        },
                        new
                        {
                            Id = "Trung",
                            Name = "Miền Trung"
                        },
                        new
                        {
                            Id = "Nam",
                            Name = "Miền Nam"
                        });
                });

            modelBuilder.Entity("Entities.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "Staff",
                            Name = "STAFF"
                        },
                        new
                        {
                            Id = "Admin",
                            Name = "ADMIN"
                        });
                });

            modelBuilder.Entity("Entities.Entities.ShippingMethod", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShippingMethods");

                    b.HasData(
                        new
                        {
                            Id = "GRAB",
                            Name = "GRAB"
                        },
                        new
                        {
                            Id = "BE",
                            Name = "BE"
                        },
                        new
                        {
                            Id = "SHOPEEFOOD",
                            Name = "SHOPEE FOOD"
                        });
                });

            modelBuilder.Entity("Entities.Entities.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<decimal>("MaxDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinOrderValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("Entities.Entities.Address", b =>
                {
                    b.HasOne("Entities.Entities.Branch", "Branch")
                        .WithMany("Addresses")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Entities.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Entities.District", "District")
                        .WithMany("Addresses")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Entities.Employee", "Employee")
                        .WithMany("Addresses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Branch");

                    b.Navigation("Customer");

                    b.Navigation("District");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Entities.Entities.BranchProduct", b =>
                {
                    b.HasOne("Entities.Entities.Branch", "Branch")
                        .WithMany("Branch_Products")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Entities.Product", "Product")
                        .WithMany("BranchProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Entities.City", b =>
                {
                    b.HasOne("Entities.Entities.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Entities.Entities.Credential", b =>
                {
                    b.HasOne("Entities.Entities.Customer", "Customer")
                        .WithMany("Credentials")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Entities.Entities.District", b =>
                {
                    b.HasOne("Entities.Entities.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Entities.Entities.Employee", b =>
                {
                    b.HasOne("Entities.Entities.Branch", "Branch")
                        .WithMany("Employees")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Entities.Entities.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Entities.Entities.Item", b =>
                {
                    b.HasOne("Entities.Entities.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Entities.Product", "Product")
                        .WithMany("Items")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Entities.Order", b =>
                {
                    b.HasOne("Entities.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Entities.Payment", "Payment")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentId");

                    b.HasOne("Entities.Entities.ShippingMethod", "ShippingMethod")
                        .WithMany("Oders")
                        .HasForeignKey("ShippingMethodId");

                    b.HasOne("Entities.Entities.Voucher", "Voucher")
                        .WithMany("Orders")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Customer");

                    b.Navigation("Payment");

                    b.Navigation("ShippingMethod");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Entities.Entities.Product", b =>
                {
                    b.HasOne("Entities.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entities.Entities.Branch", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Branch_Products");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Entities.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entities.Entities.City", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Entities.Entities.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Credentials");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Entities.Entities.District", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Entities.Entities.Employee", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Entities.Entities.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Entities.Entities.Payment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Entities.Entities.Product", b =>
                {
                    b.Navigation("BranchProducts");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Entities.Entities.Region", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Entities.Entities.Role", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Entities.Entities.ShippingMethod", b =>
                {
                    b.Navigation("Oders");
                });

            modelBuilder.Entity("Entities.Entities.Voucher", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
